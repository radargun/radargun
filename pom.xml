<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
   <modelVersion>4.0.0</modelVersion>

   <parent>
      <groupId>org.radargun</groupId>
      <artifactId>radargun-parent</artifactId>
      <version>3.0.0-SNAPSHOT</version>
      <relativePath>parent/pom.xml</relativePath>
   </parent>

   <artifactId>radargun-aggregator</artifactId>
   <name>RadarGun - Aggregator</name>
   <description>The aggregator for RadarGun</description>
   <packaging>pom</packaging>

   <modules>
      <module>core</module>
      <module>parent</module>
   </modules>

   <scm>
      <connection>scm:git:git@github.com:radargun/radargun.git</connection>
      <url>scm:git:git@github.com:radargun/radargun.git</url>
      <developerConnection>scm:git:git@github.com:radargun/radargun.git</developerConnection>
     <tag>HEAD</tag>
  </scm>

   <properties>
      <distribution.name>RadarGun-${project.version}</distribution.name>
      <distribution.artifact>target/distribution/${distribution.name}</distribution.artifact>
   </properties>

   <profiles>
      <profile>
         <id>site</id>
         <activation>
            <property>
               <name>make-site</name>
            </property>
         </activation>
         <build>
            <plugins>
               <plugin>
                  <artifactId>exec-maven-plugin</artifactId>
                  <groupId>org.codehaus.mojo</groupId>
                  <executions>
                     <execution>
                        <phase>package</phase>
                        <goals>
                           <goal>exec</goal>
                        </goals>
                        <configuration>
                           <commandlineArgs>build -d ${basedir}/target/site</commandlineArgs>
                           <workingDirectory>${basedir}/docs</workingDirectory>
                           <executable>jekyll</executable>
                        </configuration>
                     </execution>
                  </executions>
               </plugin>
            </plugins>
         </build>
      </profile>
   </profiles>

   <build>
      <plugins>
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-antrun-plugin</artifactId>
            <version>1.8</version>
            <executions>
               <execution>
                  <id>prepare_distribution</id>
                  <phase>prepare-package</phase>
                  <goals>
                     <goal>run</goal>
                  </goals>
                  <configuration>
                     <target>
                        <delete dir="target/distribution" />
                        <mkdir dir="target/distribution" />
                        <mkdir dir="${distribution.artifact}" />
                     </target>
                  </configuration>
               </execution>

               <execution>
                  <id>prepare_core</id>
                  <phase>prepare-package</phase>
                  <goals>
                     <goal>run</goal>
                  </goals>
                  <configuration>
                     <target>
                        <echo message="Packaging the Core and common scripts" />
                        <copy todir="${distribution.artifact}">
                           <fileset dir="core/target/distribution/radargun-core-bin/radargun-core">
                              <include name="**/*" />
                           </fileset>
                        </copy>
                        <copy todir="${distribution.artifact}/bin">
                           <fileset dir="bin">
                              <include name="**/*" />
                           </fileset>
                        </copy>
                        <chmod perm="ugo+rwx" type="file">
                           <fileset dir="${distribution.artifact}/bin">
                              <include name="**/*.sh" />
                              <include name="**/*.py" />
                           </fileset>
                        </chmod>
                        <mkdir dir="${distribution.artifact}/schema" />
                        <mkdir dir="${distribution.artifact}/reporters" />
                        <mkdir dir="${distribution.artifact}/plugins" />
                     </target>
                  </configuration>
               </execution>

               <execution>
                  <id>prepare_extensions</id>
                  <phase>prepare-package</phase>
                  <goals>
                     <goal>run</goal>
                  </goals>
                  <configuration>
                     <target xmlns:ac="antlib:net.sf.antcontrib">
                        <echo message="Packaging extensions: " />

                        <fileset id="core_jars" dir="core/target/distribution/radargun-core-bin/radargun-core/lib">
                           <include name="*.jar" />
                        </fileset>
                        <pathconvert pathsep="," property="core_jar_list" refid="core_jars">
                           <mapper type="flatten" />
                        </pathconvert>

                        <macrodef name="package-extension">
                           <attribute name="extension"/>
                           <attribute name="build-dir"/>
                           <sequential>
                              <echo message="Packaging extension @{extension}..." />
                              <copy todir="${distribution.artifact}/lib">
                                 <fileset dir="@{build-dir}/lib" excludes="${core_jar_list}"/>
                              </copy>
                              <!-- Configuration directory is optional. If the plugin does not contain src/main/resources/ this dir is not created -->
                              <ac:if>
                                 <available file="@{build-dir}/conf" type="dir"/>
                                 <ac:then>
                                    <copy todir="${distribution.artifact}/conf">
                                       <fileset dir="@{build-dir}/conf"/>
                                    </copy>
                                 </ac:then>
                              </ac:if>
                           </sequential>
                        </macrodef>

                        <ac:for list="${extension.cache},${extension.query},${extension.example-extension},${extension.hdrhistogram},${extension.jpa},${extension.mapreduce},${extension.rest},${extension.counter},${extension.multimap}" param="extension">
                           <sequential>
                              <package-extension extension="@{extension}" build-dir="extensions/@{extension}/target/distribution/radargun-@{extension}-bin/radargun-@{extension}"/>
                           </sequential>
                        </ac:for>
                     </target>
                  </configuration>
               </execution>

               <execution>
                  <id>prepare_plugins</id>
                  <phase>prepare-package</phase>
                  <goals>
                     <goal>run</goal>
                  </goals>
                  <configuration>
                     <target>
                        <macrodef name="chmod-if-exists">
                           <attribute name="dir"/>
                           <attribute name="perm"/>
                           <sequential>
                              <ac:if xmlns:ac="antlib:net.sf.antcontrib">
                                 <available file="@{dir}" type="dir" />
                                 <ac:then>
                                    <chmod dir="@{dir}" perm="@{perm}" includes="**/*"/>
                                 </ac:then>
                              </ac:if>
                           </sequential>
                        </macrodef>

                        <macrodef name="copy-plugin">
                           <attribute name="plugin"/>
                           <sequential>
                              <copy todir="${distribution.artifact}/plugins/@{plugin}">
                                 <fileset dir="plugins/@{plugin}/target/distribution/plugin-@{plugin}-bin/plugin-@{plugin}">
                                    <include name="**/*" />
                                 </fileset>
                              </copy>
                              <copy todir="${distribution.artifact}/schema">
                                 <fileset dir="plugins/@{plugin}">
                                    <include name="*.xsd"/>
                                 </fileset>
                              </copy>
                              <chmod-if-exists dir="${distribution.artifact}/plugins/@{plugin}/bin" perm="ugo+x" />
                           </sequential>
                        </macrodef>

                        <macrodef name="copy-plugin-links">
                           <attribute name="plugin"/>
                           <sequential>
                              <copy todir="${distribution.artifact}/plugins/@{plugin}">
                                 <fileset dir="plugins/@{plugin}/target/distribution/plugin-@{plugin}-bin/plugin-@{plugin}">
                                    <include name="**/*" />
                                    <exclude name="**/*.jar" />
                                 </fileset>
                              </copy>
                              <copy todir="${distribution.artifact}/schema">
                                 <fileset dir="plugins/@{plugin}">
                                    <include name="*.xsd"/>
                                 </fileset>
                              </copy>
                              <chmod-if-exists dir="${distribution.artifact}/plugins/@{plugin}/bin" perm="ugo+x" />
                              <copy todir="${distribution.artifact}/plugin-dependencies">
                                 <fileset dir="plugins/@{plugin}/target/distribution/plugin-@{plugin}-bin/plugin-@{plugin}/lib">
                                    <include name="*.jar" />
                                 </fileset>
                              </copy>
                              <exec executable="bash" failonerror="true">
                                 <arg value="-c"/>
                                 <arg value="for FILE in `ls plugins/@{plugin}/target/distribution/plugin-@{plugin}-bin/plugin-@{plugin}/lib/`; do ln -s ../../../plugin-dependencies/$FILE ${distribution.artifact}/plugins/@{plugin}/lib/; done;"/>
                              </exec>
                           </sequential>
                        </macrodef>

                        <path id="core_and_extensions">
                           <fileset dir="${distribution.artifact}/lib" includes="*.jar" />
                        </path>

                        <echo message="Packaging plugins: " />

                        <ac:if xmlns:ac="antlib:net.sf.antcontrib">
                           <isset property="package-latest"/>
                           <ac:then>
                                <property name="plugin.list" value="${plugins.chm},${plugins.jcache},${plugins.ehcache-latest},${plugins.hazelcast-latest},${plugins.hazelcast-enterprise-latest},${plugins.redis-latest},${plugins.redis-enterprise-latest},${plugins.jbosscache-latest},${plugins.jgroups-latest},${plugins.infinispan-latest},${plugins.jdg-latest},${plugins.coherence-latest},${plugins.process},${plugins.resteasy-http},${plugins.spymemcached},${plugins.tomcat},${plugins.docker},${plugins.openshift},${plugins.spark},${plugins.etcd}" />
                           </ac:then>
                           <ac:else>
                               <property name="plugin.list" value="${plugins.chm},${plugins.jcache},${plugins.ehcache},${plugins.hazelcast},${plugins.hazelcast-enterprise},${plugins.redis},${plugins.redis-enterprise},${plugins.jbosscache},${plugins.jgroups},${plugins.infinispan},${plugins.infinispan-snapshot},${plugins.jdg-early},${plugins.jdg},${plugins.jdg-snapshot},${plugins.coherence},${plugins.process},${plugins.resteasy-http},${plugins.spymemcached},${plugins.tomcat},${plugins.docker},${plugins.openshift},${plugins.spark},${plugins.etcd}"/>
                           </ac:else>
                        </ac:if>
                        <echo message="Plugin list: ${plugin.list}" />
                        <!-- Note: JCache needs to be here for schema generation, although it can't be used on its own -->
                        <ac:for list="${plugin.list}" param="plugin" xmlns:ac="antlib:net.sf.antcontrib">
                           <sequential>
                              <echo message="Packaging plugin @{plugin}..." />
                              <ac:if>
                                 <isset property="zip-links"/>
                                 <ac:then>
                                    <copy-plugin-links plugin="@{plugin}"/>
                                 </ac:then>
                                 <ac:else>
                                    <copy-plugin plugin="@{plugin}"/>
                                 </ac:else>
                              </ac:if>
                              <java classname="org.radargun.config.PluginSchemaGenerator" failonerror="true" fork="true">
                                 <classpath>
                                    <path refid="core_and_extensions"/>
                                    <fileset dir="${distribution.artifact}/plugins/@{plugin}/lib" includes="*.jar"/>
                                 </classpath>
                                 <sysproperty key="log4j.configuration" value="file:///${basedir}/core/target/distribution/radargun-core-bin/radargun-core/conf/log4j.xml" />
                                 <arg value="${distribution.artifact}/schema" />
                                 <arg value="@{plugin}" />
                              </java>
                           </sequential>
                        </ac:for>
                     </target>
                  </configuration>
               </execution>

               <execution>
                  <id>prepare_reporters</id>
                  <phase>prepare-package</phase>
                  <goals>
                     <goal>run</goal>
                  </goals>
                  <configuration>
                     <target>
                        <echo message="Packaging reporters: " />

                        <fileset id="core_jars" dir="core/target/distribution/radargun-core-bin/radargun-core/lib">
                           <include name="*.jar" />
                        </fileset>
                        <pathconvert pathsep="," property="core_jar_list" refid="core_jars">
                           <mapper type="flatten" />
                        </pathconvert>
                        <path id="core_and_extensions">
                           <fileset dir="${distribution.artifact}/lib" includes="*.jar" />
                        </path>

                        <ac:for list="${reporter.default},${reporter.perfrepo}" param="reporter" xmlns:ac="antlib:net.sf.antcontrib">
                           <sequential>
                              <echo message="Packaging reporter @{reporter}..." />
                              <copy todir="${distribution.artifact}/reporters/@{reporter}">
                                 <fileset dir="reporters/@{reporter}/target/distribution/@{reporter}-bin/@{reporter}/lib" excludes="${core_jar_list}"/>
                              </copy>
                              <java classname="org.radargun.config.ReporterSchemaGenerator" failonerror="true" classpathref="core_and_extensions" fork="true">
                                 <sysproperty key="log4j.configuration" value="file:///${basedir}/core/target/distribution/radargun-core-bin/radargun-core/conf/log4j.xml" />
                                 <arg value="${distribution.artifact}/schema" />
                                 <arg value="${distribution.artifact}/reporters/@{reporter}" />
                                 <arg value="@{reporter}" />
                              </java>
                           </sequential>
                        </ac:for>
                     </target>
                  </configuration>
               </execution>

               <execution>
                  <id>generate_xsd</id>
                  <phase>prepare-package</phase>
                  <goals>
                     <goal>run</goal>
                  </goals>
                  <configuration>
                     <target>
                        <echo message="Generating XSD schema" />
                        <path id="core_and_extensions">
                           <fileset dir="${distribution.artifact}/lib" includes="*.jar" />
                        </path>
                        <java classname="org.radargun.config.BenchmarkSchemaGenerator" failonerror="true" classpathref="core_and_extensions" fork="true">
                           <sysproperty key="log4j.configuration" value="file:///${basedir}/core/target/distribution/radargun-core-bin/radargun-core/conf/log4j.xml" />
                           <arg value="${distribution.artifact}/schema" />
                        </java>
                        <java classname="org.radargun.config.ScenarioSchemaGenerator" failonerror="true" classpathref="core_and_extensions" fork="true">
                           <sysproperty key="log4j.configuration" value="file:///${basedir}/core/target/distribution/radargun-core-bin/radargun-core/conf/log4j.xml" />
                           <arg value="${distribution.artifact}/schema" />
                        </java>
                        <java classname="org.radargun.config.StagesSchemaGenerator" failonerror="true" classpathref="core_and_extensions" fork="true">
                           <sysproperty key="log4j.configuration" value="file:///${basedir}/core/target/distribution/radargun-core-bin/radargun-core/conf/log4j.xml" />
                           <arg value="${distribution.artifact}/schema" />
                        </java>
                        <copy todir="${distribution.artifact}/schema">
                           <fileset dir="." includes="*.xsd"/>
                        </copy>
                     </target>
                  </configuration>
               </execution>

               <execution>
                  <id>build_distro</id>
                  <phase>package</phase>
                  <goals>
                     <goal>run</goal>
                  </goals>
                  <configuration>
                     <tasks>
                        <ac:if xmlns:ac="antlib:net.sf.antcontrib">
                           <not>
                              <isset property="no-zip" />
                           </not>
                           <ac:then>
                              <echo message="Building distribution archive" />
                              <ac:if>
                                 <isset property="zip-links"/>
                                 <ac:then>
                                    <!-- This cannot be executed on all platforms and the produced zip may be non-portable either -->
                                    <echo message="Building zip file ${distribution.name}.zip"/>
                                    <exec executable="zip" failonerror="true" dir="target/distribution" logError="true" output="/dev/null">
                                       <arg value="-ry"/>
                                       <arg value="${distribution.name}.zip"/>
                                       <arg value="${distribution.name}/"/>
                                    </exec>
                                 </ac:then>
                                 <ac:else>
                                    <zip destfile="target/distribution/${distribution.name}.zip" basedir="target/distribution" excludes="**/bin/**,radargun-aggregator-bin/**">
                                       <zipfileset dir="${distribution.artifact}/bin" filemode="755" prefix="${distribution.name}/bin" />
                                       <zipfileset dir="${distribution.artifact}/plugins/process/bin" filemode="755" prefix="${distribution.name}/plugins/process/bin"/>
                                    </zip>
                                 </ac:else>
                              </ac:if>
                           </ac:then>
                        </ac:if>
                     </tasks>
                  </configuration>
               </execution>
               <execution>
                  <id>generate_documentation</id>
                  <phase>prepare-package</phase>
                  <goals>
                     <goal>run</goal>
                  </goals>
                  <configuration>
                     <target>
                        <echo message="Generating XSD schema" />
                        <path id="core_and_extensions">
                           <fileset dir="${distribution.artifact}/lib" includes="*.jar" />
                        </path>
                        <java classname="org.radargun.config.PhaseDocumentationGenerator"
                           failonerror="true" classpathref="core_and_extensions" fork="true">
                           <sysproperty key="log4j.configuration"
                              value="file:///${basedir}/core/target/distribution/radargun-core-bin/radargun-core/conf/log4j.xml" />
                           <arg value="${basedir}/docs/stages/" />
                        </java>
                     </target>
                  </configuration>
               </execution>
            </executions>
            <dependencies>
               <dependency>
                  <groupId>ant-contrib</groupId>
                  <artifactId>ant-contrib</artifactId>
                  <version>1.0b3</version>
                  <exclusions>
                     <exclusion>
                        <groupId>ant</groupId>
                        <artifactId>ant</artifactId>
                     </exclusion>
                  </exclusions>
               </dependency>
            </dependencies>
         </plugin>
          <plugin>
              <groupId>pl.project13.maven</groupId>
              <artifactId>git-commit-id-plugin</artifactId>
              <version>2.2.6</version>
              <executions>
                  <execution>
                      <id>get-the-git-infos</id>
                      <goals>
                          <goal>revision</goal>
                      </goals>
                      <phase>install</phase>
                  </execution>
              </executions>
              <configuration>
                  <generateGitPropertiesFile>true</generateGitPropertiesFile>
                  <generateGitPropertiesFilename>${distribution.artifact}/bin/git.properties</generateGitPropertiesFilename>
                  <skipPoms>false</skipPoms>
                  <failOnNoGitDirectory>false</failOnNoGitDirectory>
                  <failOnUnableToExtractRepoInfo>false</failOnUnableToExtractRepoInfo>
              </configuration>
          </plugin>
      </plugins>
   </build>
</project>
