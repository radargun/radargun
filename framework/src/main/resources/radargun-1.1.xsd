<schema xmlns:rg="urn:radargun:benchmark:1.1" attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="urn:radargun:benchmark:1.1" version="1.0" xmlns="http://www.w3.org/2001/XMLSchema">
   <element name="bench-config">
      <complexType>
         <sequence>
            <element maxOccurs="1" minOccurs="1" name="master">
               <complexType>
                  <attribute name="bindAddress" type="string"/>
                  <attribute name="port" type="string"/>
               </complexType>
            </element>
            <element maxOccurs="1" minOccurs="1" name="benchmark">
               <complexType>
                  <sequence>
                     <choice maxOccurs="unbounded" minOccurs="1">
                        <element name="Repeat" type="rg:repeat"/>
                        <element name="Abstract" type="rg:Abstract"/>
                        <element name="AbstractDist" type="rg:AbstractDist"/>
                        <element name="AbstractMaster" type="rg:AbstractMaster"/>
                        <element name="AbstractStart" type="rg:AbstractStart"/>
                        <element name="Check" type="rg:Check"/>
                        <element name="CheckData" type="rg:CheckData"/>
                        <element name="CheckTopology" type="rg:CheckTopology"/>
                        <element name="ClearCluster" type="rg:ClearCluster"/>
                        <element name="StressTest" type="rg:StressTest"/>
                        <element name="WebSessionBenchmark" type="rg:StressTest"/>
                        <element name="ClientStressTest" type="rg:ClientStressTest"/>
                        <element name="ClusterValidation" type="rg:ClusterValidation"/>
                        <element name="CsvReportGeneration" type="rg:CsvReportGeneration"/>
                        <element name="DataForQuery" type="rg:DataForQuery"/>
                        <element name="DestroyWrapper" type="rg:DestroyWrapper"/>
                        <element name="DistributedTask" type="rg:DistributedTask"/>
                        <element name="GenerateChart" type="rg:GenerateChart"/>
                        <element name="IsolationLevelCheck" type="rg:IsolationLevelCheck"/>
                        <element name="JMXClusterValidation" type="rg:JMXClusterValidation"/>
                        <element name="JMXClusterValidationPrepare" type="rg:JMXClusterValidationPrepare"/>
                        <element name="JProfiler" type="rg:JProfiler"/>
                        <element name="Kill" type="rg:Kill"/>
                        <element name="LoadFile" type="rg:LoadFile"/>
                        <element name="MapReduce" type="rg:MapReduce"/>
                        <element name="ParallelStartKill" type="rg:ParallelStartKill"/>
                        <element name="Query" type="rg:Query"/>
                        <element name="RandomData" type="rg:RandomData"/>
                        <element name="ReportBackgroundStats" type="rg:ReportBackgroundStats"/>
                        <element name="ReportJVMMonitor" type="rg:ReportJVMMonitor"/>
                        <element name="SetLogLevel" type="rg:SetLogLevel"/>
                        <element name="SetPartitions" type="rg:SetPartitions"/>
                        <element name="SingleTXCheck" type="rg:SingleTXCheck"/>
                        <element name="SingleTXLoad" type="rg:SingleTXLoad"/>
                        <element name="Sleep" type="rg:Sleep"/>
                        <element name="StackTraceWatchdog" type="rg:StackTraceWatchdog"/>
                        <element name="StartBackgroundStatistics" type="rg:StartBackgroundStatistics"/>
                        <element name="StartBackgroundStressors" type="rg:StartBackgroundStressors"/>
                        <element name="StartCluster" type="rg:StartCluster"/>
                        <element name="StartJVMMonitor" type="rg:StartJVMMonitor"/>
                        <element name="StopBackgroundStatistics" type="rg:StopBackgroundStatistics"/>
                        <element name="StopBackgroundStressors" type="rg:StopBackgroundStressors"/>
                        <element name="StopJVMMonitor" type="rg:StopJVMMonitor"/>
                        <element name="StressTestWarmup" type="rg:StressTestWarmup"/>
                        <element name="WebSessionWarmup" type="rg:StressTestWarmup"/>
                        <element name="TpccBenchmark" type="rg:TpccBenchmark"/>
                        <element name="TpccPopulation" type="rg:TpccPopulation"/>
                        <element name="WaitForTopologyEvent" type="rg:WaitForTopologyEvent"/>
                        <element name="WriteSkewCheck" type="rg:WriteSkewCheck"/>
                        <element name="XSReplCheck" type="rg:XSReplCheck"/>
                        <element name="XSReplLoad" type="rg:XSReplLoad"/>
                     </choice>
                  </sequence>
                  <attribute name="initSize" type="string"/>
                  <attribute name="maxSize" type="string"/>
                  <attribute name="increment" type="string"/>
               </complexType>
            </element>
            <element maxOccurs="1" minOccurs="1" name="products">
               <complexType>
                  <sequence>
                     <choice maxOccurs="unbounded" minOccurs="1">
                        <element name="product" type="rg:product"/>
                        <element name="hazelcast2" type="rg:hazelcast2"/>
                        <element name="hazelcast3" type="rg:hazelcast3"/>
                        <element name="infinispan4" type="rg:infinispan4"/>
                        <element name="infinispan50" type="rg:infinispan50"/>
                        <element name="infinispan51" type="rg:infinispan51"/>
                        <element name="infinispan52" type="rg:infinispan52"/>
                        <element name="infinispan53" type="rg:infinispan53"/>
                        <element name="infinispan60" type="rg:infinispan60"/>
                        <element name="jgroups" type="rg:jgroups"/>
                        <element name="jbosscache2" type="rg:jbosscache2"/>
                        <element name="jbosscache3" type="rg:jbosscache3"/>
                        <element name="ehcache25" type="rg:ehcache25"/>
                        <element name="ehcache26" type="rg:ehcache26"/>
                        <element name="terracota3" type="rg:terracota3"/>
                        <element name="chm" type="rg:chm"/>
                        <element name="coherence3" type="rg:coherence3"/>
                        <element name="jdg60" type="rg:jdg60"/>
                        <element name="jdg61" type="rg:jdg61"/>
                        <element name="jdg62" type="rg:jdg62"/>
                     </choice>
                  </sequence>
               </complexType>
            </element>
            <element maxOccurs="1" minOccurs="1" name="reports">
               <complexType>
                  <sequence>
                     <element maxOccurs="unbounded" minOccurs="0" name="report">
                        <complexType>
                           <sequence>
                              <element maxOccurs="unbounded" minOccurs="0" name="item">
                                 <complexType>
                                    <attribute name="product" type="string"/>
                                    <attribute name="config" type="string"/>
                                 </complexType>
                              </element>
                           </sequence>
                           <attribute name="name" type="string"/>
                           <attribute name="includeAll" type="string"/>
                        </complexType>
                     </element>
                  </sequence>
               </complexType>
            </element>
         </sequence>
      </complexType>
   </element>
   <complexType name="repeat">
      <sequence>
         <choice maxOccurs="unbounded" minOccurs="1">
            <element name="Repeat" type="rg:repeat"/>
            <element name="Abstract" type="rg:Abstract"/>
            <element name="AbstractDist" type="rg:AbstractDist"/>
            <element name="AbstractMaster" type="rg:AbstractMaster"/>
            <element name="AbstractStart" type="rg:AbstractStart"/>
            <element name="Check" type="rg:Check"/>
            <element name="CheckData" type="rg:CheckData"/>
            <element name="CheckTopology" type="rg:CheckTopology"/>
            <element name="ClearCluster" type="rg:ClearCluster"/>
            <element name="StressTest" type="rg:StressTest"/>
            <element name="WebSessionBenchmark" type="rg:StressTest"/>
            <element name="ClientStressTest" type="rg:ClientStressTest"/>
            <element name="ClusterValidation" type="rg:ClusterValidation"/>
            <element name="CsvReportGeneration" type="rg:CsvReportGeneration"/>
            <element name="DataForQuery" type="rg:DataForQuery"/>
            <element name="DestroyWrapper" type="rg:DestroyWrapper"/>
            <element name="DistributedTask" type="rg:DistributedTask"/>
            <element name="GenerateChart" type="rg:GenerateChart"/>
            <element name="IsolationLevelCheck" type="rg:IsolationLevelCheck"/>
            <element name="JMXClusterValidation" type="rg:JMXClusterValidation"/>
            <element name="JMXClusterValidationPrepare" type="rg:JMXClusterValidationPrepare"/>
            <element name="JProfiler" type="rg:JProfiler"/>
            <element name="Kill" type="rg:Kill"/>
            <element name="LoadFile" type="rg:LoadFile"/>
            <element name="MapReduce" type="rg:MapReduce"/>
            <element name="ParallelStartKill" type="rg:ParallelStartKill"/>
            <element name="Query" type="rg:Query"/>
            <element name="RandomData" type="rg:RandomData"/>
            <element name="ReportBackgroundStats" type="rg:ReportBackgroundStats"/>
            <element name="ReportJVMMonitor" type="rg:ReportJVMMonitor"/>
            <element name="SetLogLevel" type="rg:SetLogLevel"/>
            <element name="SetPartitions" type="rg:SetPartitions"/>
            <element name="SingleTXCheck" type="rg:SingleTXCheck"/>
            <element name="SingleTXLoad" type="rg:SingleTXLoad"/>
            <element name="Sleep" type="rg:Sleep"/>
            <element name="StackTraceWatchdog" type="rg:StackTraceWatchdog"/>
            <element name="StartBackgroundStatistics" type="rg:StartBackgroundStatistics"/>
            <element name="StartBackgroundStressors" type="rg:StartBackgroundStressors"/>
            <element name="StartCluster" type="rg:StartCluster"/>
            <element name="StartJVMMonitor" type="rg:StartJVMMonitor"/>
            <element name="StopBackgroundStatistics" type="rg:StopBackgroundStatistics"/>
            <element name="StopBackgroundStressors" type="rg:StopBackgroundStressors"/>
            <element name="StopJVMMonitor" type="rg:StopJVMMonitor"/>
            <element name="StressTestWarmup" type="rg:StressTestWarmup"/>
            <element name="WebSessionWarmup" type="rg:StressTestWarmup"/>
            <element name="TpccBenchmark" type="rg:TpccBenchmark"/>
            <element name="TpccPopulation" type="rg:TpccPopulation"/>
            <element name="WaitForTopologyEvent" type="rg:WaitForTopologyEvent"/>
            <element name="WriteSkewCheck" type="rg:WriteSkewCheck"/>
            <element name="XSReplCheck" type="rg:XSReplCheck"/>
            <element name="XSReplLoad" type="rg:XSReplLoad"/>
         </choice>
      </sequence>
      <attribute name="times" type="string"/>
      <attribute name="from" type="string"/>
      <attribute name="to" type="string"/>
      <attribute name="inc" type="string"/>
      <attribute name="name" type="string"/>
   </complexType>
   <complexType abstract="true" name="Abstract">
      <annotation>
         <documentation/>
      </annotation>
   </complexType>
   <complexType abstract="true" name="AbstractDist">
      <annotation>
         <documentation/>
      </annotation>
      <complexContent>
         <extension base="rg:Abstract">
            <attribute name="exitBenchmarkOnSlaveFailure" type="rg:boolean">
               <annotation>
                  <documentation>Should the benchmark fail if one of the slaves sends error acknowledgement? Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="runOnAllSlaves" type="rg:boolean">
               <annotation>
                  <documentation>If set to true the stage should be run on maxSlaves (applies to scaling benchmarks). Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="slaves" type="string">
               <annotation>
                  <documentation>Specifies on which slaves should this stage actively run. Default is stage-dependent (usually all or none).</documentation>
               </annotation>
            </attribute>
            <attribute name="useSmartClassLoading" type="rg:boolean">
               <annotation>
                  <documentation>Smart class loading loads libraries specific for the product. Default is true.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <simpleType name="boolean">
      <union>
         <simpleType>
            <restriction base="boolean"/>
         </simpleType>
         <simpleType>
            <restriction base="string">
               <pattern value="[$#]\{.*\}"/>
            </restriction>
         </simpleType>
      </union>
   </simpleType>
   <complexType abstract="true" name="AbstractMaster">
      <annotation>
         <documentation/>
      </annotation>
      <complexContent>
         <extension base="rg:Abstract"/>
      </complexContent>
   </complexType>
   <complexType abstract="true" name="AbstractStart">
      <annotation>
         <documentation/>
      </annotation>
      <complexContent>
         <extension base="rg:AbstractDist">
            <attribute name="mayFailOn" type="string">
               <annotation>
                  <documentation>Set of slaves where the start may fail but this will not cause an error. Default is none.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <complexType abstract="true" name="Check">
      <annotation>
         <documentation/>
      </annotation>
      <complexContent>
         <extension base="rg:AbstractDist"/>
      </complexContent>
   </complexType>
   <complexType name="CheckData">
      <annotation>
         <documentation>Stage for checking presence or absence of data uploaded by BackgroundStressors</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:AbstractDist">
            <attribute name="checkEntryCount" type="rg:int">
               <annotation>
                  <documentation>Number of entries that will be checked in each step. Default is 1.</documentation>
               </annotation>
            </attribute>
            <attribute name="checkThreads" type="rg:int">
               <annotation>
                  <documentation>Number of thread per node which check data validity. Default is 1.</documentation>
               </annotation>
            </attribute>
            <attribute name="debugNull" type="rg:boolean">
               <annotation>
                  <documentation>If the GET request results in null response, call wrapper-specific functions to show debug info. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="deleted" type="rg:boolean">
               <annotation>
                  <documentation>If set to true, we are checking that the data are NOT in the cluster anymore. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="entrySize" type="rg:int" use="required">
               <annotation>
                  <documentation>Number of bytes carried in single entry.</documentation>
               </annotation>
            </attribute>
            <attribute name="extraEntries" type="string">
               <annotation>
                  <documentation>Entries that do not have the expected form but occur in the cluster. This string specifies a polynomial in number of slaves: 1,2,3 with 4 slaves would result in 1 + 2*4 + 3*4*4 = 57 extra entries.Defaults to 0.</documentation>
               </annotation>
            </attribute>
            <attribute name="failOnNull" type="rg:boolean">
               <annotation>
                  <documentation>If entry is null, fail immediatelly. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="firstEntryOffset" type="rg:int">
               <annotation>
                  <documentation>Index of key of first entry. This number will be multiplied by slaveIndex. Default is 0.</documentation>
               </annotation>
            </attribute>
            <attribute name="ignoreSum" type="rg:boolean">
               <annotation>
                  <documentation>Usually the test checks that sum of local nodes = numOwners * numEntries + extraEntries.This option disables such behaviour. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="liveSlavesHint" type="rg:int">
               <annotation>
                  <documentation>Hint how many slaves are currently alive - if set to &gt; 0 then the query for amount of entries inthis cache is postponed until the cache appears to be fully replicated. By default this is disabled.</documentation>
               </annotation>
            </attribute>
            <attribute name="logChecksCount" type="rg:int">
               <annotation>
                  <documentation>Number of queries after which a DEBUG log message is printed. Default is 10000.</documentation>
               </annotation>
            </attribute>
            <attribute name="memoryOnly" type="rg:boolean">
               <annotation>
                  <documentation>If the cache wrapper supports persistent storage and this is set to true, the check will be executed only against in-memory data. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="numEntries" type="rg:int" use="required">
               <annotation>
                  <documentation>Number of entries with key in form specified by the last used key generator, in the cache.</documentation>
               </annotation>
            </attribute>
            <attribute name="numOwners" type="rg:int">
               <annotation>
                  <documentation>Number of owners of one key (primary + backups). If negative the number is multiplied by cluster size, therefore, -1 means full replication. Default is -1.</documentation>
               </annotation>
            </attribute>
            <attribute name="stepEntryCount" type="rg:int">
               <annotation>
                  <documentation>Number of entries stepped in each step. Default is 1.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <simpleType name="int">
      <union>
         <simpleType>
            <restriction base="integer"/>
         </simpleType>
         <simpleType>
            <restriction base="string">
               <pattern value="[$#]\{.*\}"/>
            </restriction>
         </simpleType>
      </union>
   </simpleType>
   <complexType name="CheckTopology">
      <annotation>
         <documentation>Controls which topology events have (not) happened recently</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:AbstractDist">
            <attribute name="changed" type="rg:boolean">
               <annotation>
                  <documentation>The check controls if this event has happened (true) or not happened (false). Defaults to true.</documentation>
               </annotation>
            </attribute>
            <attribute name="period" type="rg:long__org_radargun_config_TimeConverter">
               <annotation>
                  <documentation>The period in milliseconds which is checked. Default is infinite.</documentation>
               </annotation>
            </attribute>
            <attribute name="type" type="rg:org_radargun_stages_CheckTopologyStage_Type">
               <annotation>
                  <documentation>What does this stage control. Default is both DataRehashed and TopologyChanged events.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <simpleType name="long__org_radargun_config_TimeConverter">
      <union>
         <simpleType>
            <restriction>
               <pattern value="[0-9]+\s*[mMsS]?"/>
            </restriction>
         </simpleType>
         <simpleType>
            <restriction base="string">
               <pattern value="[$#]\{.*\}"/>
            </restriction>
         </simpleType>
      </union>
   </simpleType>
   <simpleType name="org_radargun_stages_CheckTopologyStage_Type">
      <union>
         <simpleType>
            <restriction base="string">
               <enumeration value="HASH_AND_TOPOLOGY"/>
               <enumeration value="HASH"/>
               <enumeration value="TOPOLOGY"/>
            </restriction>
         </simpleType>
         <simpleType>
            <restriction base="string">
               <pattern value="[$#]\{.*\}"/>
            </restriction>
         </simpleType>
      </union>
   </simpleType>
   <complexType name="ClearCluster">
      <annotation>
         <documentation>Removes all data from the cache</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:AbstractDist"/>
      </complexContent>
   </complexType>
   <complexType name="StressTest">
      <annotation>
         <documentation>Benchmark where several client threads access cache limited by time or number of requests.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:AbstractDist">
            <attribute name="bulkSize" type="rg:int">
               <annotation>
                  <documentation>Number of keys inserted/retrieved within one operation. Applicable only when the cache wrappersupports bulk operations. Default is 1 (no bulk operations).</documentation>
               </annotation>
            </attribute>
            <attribute name="cacheSpecificKeyGenerator" type="rg:boolean">
               <annotation>
                  <documentation>Specifies whether the key generator is produced by a cache wrapper and therefore is product-specific. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="commitTransactions" type="rg:boolean">
               <annotation>
                  <documentation>Specifies whether the transactions should be committed (true) or rolled back (false). Default is true</documentation>
               </annotation>
            </attribute>
            <attribute name="duration" type="rg:long__org_radargun_config_TimeConverter">
               <annotation>
                  <documentation>Benchmark duration. This takes precedence over numRequests. By default switched off.</documentation>
               </annotation>
            </attribute>
            <attribute name="entrySize" type="rg:int">
               <annotation>
                  <documentation>Size of the value in bytes. Default is 1000.</documentation>
               </annotation>
            </attribute>
            <attribute name="fixedKeys" type="rg:boolean">
               <annotation>
                  <documentation>The keys can be fixed for the whole test run period or we the set can change over time. Default is true = fixed.</documentation>
               </annotation>
            </attribute>
            <attribute name="generateHistogramRange" type="rg:boolean">
               <annotation>
                  <documentation>Generate a range for histogram with operations statistics (for use in next stress tests). Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="keyGeneratorClass" type="string">
               <annotation>
                  <documentation>Full class name of the key generator. Default is org.radargun.stressors.StringKeyGenerator.</documentation>
               </annotation>
            </attribute>
            <attribute name="keyGeneratorParam" type="string">
               <annotation>
                  <documentation>Used to initialize the key generator. Null by default.</documentation>
               </annotation>
            </attribute>
            <attribute name="loadAllKeys" type="rg:boolean">
               <annotation>
                  <documentation>This option is valid only for sharedKeys=true. It forces local loading of all keys (not only numEntries/numNodes). Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="numEntries" type="rg:int">
               <annotation>
                  <documentation>Number of key-value entries per each client thread which should be used. Default is 100.</documentation>
               </annotation>
            </attribute>
            <attribute name="numOfThreads" type="rg:int">
               <annotation>
                  <documentation>*DEPRECATED* The number of threads that will work on this slave. Default is 10.</documentation>
               </annotation>
            </attribute>
            <attribute name="numRequests" type="rg:int">
               <annotation>
                  <documentation>Total number of request to be made against this session: reads + writes. If duration is specified this value is ignored. Default is 50000.</documentation>
               </annotation>
            </attribute>
            <attribute name="numThreads" type="rg:int">
               <annotation>
                  <documentation>The number of threads that will work on this slave. Default is 10.</documentation>
               </annotation>
            </attribute>
            <attribute name="numberOfAttributes" type="rg:int">
               <annotation>
                  <documentation>*DEPRECATED* Number of key-value entries per each client thread which should be used. Default is 100.</documentation>
               </annotation>
            </attribute>
            <attribute name="numberOfRequests" type="rg:int">
               <annotation>
                  <documentation>*DEPRECATED* Total number of request to be made against this session: reads + writes. If duration is specified this value is ignored. Default is 50000.</documentation>
               </annotation>
            </attribute>
            <attribute name="opsCountStatusLog" type="rg:int">
               <annotation>
                  <documentation>Number of operations after which a log entry should be written. Default is 5000.</documentation>
               </annotation>
            </attribute>
            <attribute name="poolKeys" type="rg:boolean">
               <annotation>
                  <documentation>Keep all keys in a pool - do not generate the keys for each request anew. Default is true.</documentation>
               </annotation>
            </attribute>
            <attribute name="preferAsyncOperations" type="rg:boolean">
               <annotation>
                  <documentation>When executing bulk operations, prefer version with multiple async operations over native implementation. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="removePercentage" type="rg:int">
               <annotation>
                  <documentation>The frequency of removes (percentage). Default is 0%</documentation>
               </annotation>
            </attribute>
            <attribute name="replaceInvalidPercentage" type="rg:int">
               <annotation>
                  <documentation>In case we test replace performance, the frequency of replaces that should fail (percentage). Default is 40%</documentation>
               </annotation>
            </attribute>
            <attribute name="sharedKeys" type="rg:boolean">
               <annotation>
                  <documentation>By default each client thread operates on his private set of keys. Setting this to true introduces contention between the threads, the numThreads property says total amount of entries that are used by all threads. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="sizeOfAnAttribute" type="rg:int">
               <annotation>
                  <documentation>*DEPRECATED* Size of the value in bytes. Default is 1000.</documentation>
               </annotation>
            </attribute>
            <attribute name="transactionSize" type="rg:int">
               <annotation>
                  <documentation>Number of requests in one transaction. Default is 1.</documentation>
               </annotation>
            </attribute>
            <attribute name="useAtomics" type="rg:boolean">
               <annotation>
                  <documentation>If true, putIfAbsent and replace operations are used. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="useHistogramStatistics" type="rg:boolean">
               <annotation>
                  <documentation>The test will produce operation statistics in histogram. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="useSimpleStatistics" type="rg:boolean">
               <annotation>
                  <documentation>The test will produce operation statistics as average values. Default is true.</documentation>
               </annotation>
            </attribute>
            <attribute name="useTransactions" type="rg:java_lang_Boolean">
               <annotation>
                  <documentation>Specifies if the requests should be explicitely wrapped in transactions. By defaultthe cachewrapper is queried whether it does support the transactions, if it does,transactions are used, otherwise these are not.</documentation>
               </annotation>
            </attribute>
            <attribute name="writePercentage" type="rg:int">
               <annotation>
                  <documentation>Ratio of writes = PUT requests (percentage). Default is 20%</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <simpleType name="java_lang_Boolean">
      <union>
         <simpleType>
            <restriction base="boolean"/>
         </simpleType>
         <simpleType>
            <restriction base="string">
               <pattern value="[$#]\{.*\}"/>
            </restriction>
         </simpleType>
      </union>
   </simpleType>
   <complexType name="ClientStressTest">
      <annotation>
         <documentation>Repeats the StressTest logic with increasing amount of client threads.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:StressTest">
            <attribute name="increment" type="rg:int">
               <annotation>
                  <documentation>Number of threads which should be added in each iteration. Default is 1.</documentation>
               </annotation>
            </attribute>
            <attribute name="initThreads" type="rg:int" use="required">
               <annotation>
                  <documentation>Initial number of threads.</documentation>
               </annotation>
            </attribute>
            <attribute name="maxThreads" type="rg:int" use="required">
               <annotation>
                  <documentation>Maximum number of threads this will be run with.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="ClusterValidation">
      <annotation>
         <documentation>Verifies that the cluster is formed by injecting an entry into the cache and then reading it from other nodes.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:AbstractDist">
            <attribute name="partialReplication" type="rg:boolean">
               <annotation>
                  <documentation>If set to true, then the slave will consider that the cluster is formed when one slave replicated the control entry. Otherwise the replication will only be considered successful if all slaves replicated the control value. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="replicationTimeSleep" type="rg:int">
               <annotation>
                  <documentation>Delay between attempts to retrieve the control entry.</documentation>
               </annotation>
            </attribute>
            <attribute name="replicationTryCount" type="rg:int">
               <annotation>
                  <documentation>How many times we should try to retrieve the control entry.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="CsvReportGeneration">
      <annotation>
         <documentation>Generates report in CSV format from the latest StressTest results</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:AbstractMaster">
            <attribute name="computeAverage" type="rg:boolean">
               <annotation>
                  <documentation>Adds a line with average results. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="ignore" type="string">
               <annotation>
                  <documentation>Slaves whose results will be ignored.</documentation>
               </annotation>
            </attribute>
            <attribute name="targetDir" type="string">
               <annotation>
                  <documentation>Directory into which will be report files written.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="DataForQuery">
      <annotation>
         <documentation>Stage which executes puts/gets indexed entries against index enabled cache.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:StressTest">
            <attribute name="dataPath" type="string">
               <annotation>
                  <documentation>Specifies the full path of the property file which contains different words for querying. No default value is provided. This property is mandatory.</documentation>
               </annotation>
            </attribute>
            <attribute name="isWildCard" type="rg:boolean">
               <annotation>
                  <documentation>Specifies whether the key generation should be done according to wildcard logic or no. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="propertyLength" type="rg:int">
               <annotation>
                  <documentation>The length of the generated indexed entry. Default is 100.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="DestroyWrapper">
      <annotation>
         <documentation>Distributed stage that will stop the cache wrapper on each slave.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:AbstractDist">
            <attribute name="enforceMemoryThrashHold" type="rg:boolean">
               <annotation>
                  <documentation>Specifies whether the check for amount of free memory should be performed. Default is true.</documentation>
               </annotation>
            </attribute>
            <attribute name="heapDumpDir" type="string">
               <annotation>
                  <documentation>Directory where the heap dump will be produced if the memory threshold is hit. By default the dump will not be produced.</documentation>
               </annotation>
            </attribute>
            <attribute name="memoryThreshold" type="string">
               <annotation>
                  <documentation>If the free memory after wrapper destroy and System.gc() is below percentage specified in this property the benchmark will stop. Default is 95.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="DistributedTask">
      <annotation>
         <documentation>Stage which executes a MapReduce Task against all keys in the cache.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:AbstractDist">
            <attribute name="distributedCallableFqn" type="string" use="required">
               <annotation>
                  <documentation>Fully qualified class name of the org.infinispan.distexec.DistributedCallable or java.util.concurrent.Callable implementation to execute.</documentation>
               </annotation>
            </attribute>
            <attribute name="distributedExecutionParams" type="string">
               <annotation>
                  <documentation>A String in the form of 'methodName:methodParameter;methodName1:methodParameter1' that allows invoking a method on the distributedCallableFqn Object. The method must be public and take a String parameter.</documentation>
               </annotation>
            </attribute>
            <attribute name="executionPolicyName" type="string">
               <annotation>
                  <documentation>The name of one of the org.infinispan.distexec.DistributedTaskExecutionPolicy enums. The default is null.</documentation>
               </annotation>
            </attribute>
            <attribute name="failoverPolicyFqn" type="string">
               <annotation>
                  <documentation>The fully qualified class name for a custom org.infinispan.distexec.DistributedTaskFailoverPolicy implementation. The default is null.</documentation>
               </annotation>
            </attribute>
            <attribute name="nodeAddress" type="string">
               <annotation>
                  <documentation>The node address where the task will be executed. The default is null, and tasks will be executed against all nodes in the cluster.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="GenerateChart">
      <annotation>
         <documentation>Stage that generates a chart from a set of csv files.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:AbstractMaster">
            <attribute name="csvFilesDirectory" type="string">
               <annotation>
                  <documentation>Path to directory where are the (input) CSV files. Default is 'reports'.</documentation>
               </annotation>
            </attribute>
            <attribute name="reportDirectory" type="string">
               <annotation>
                  <documentation>Path to directory where the report (output) should be generated. Default is 'reports'.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="IsolationLevelCheck">
      <annotation>
         <documentation>Stage for testing guaranties of isolation levels.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:Check">
            <attribute name="duration" type="rg:long__org_radargun_config_TimeConverter">
               <annotation>
                  <documentation>How long should this stage take. Default is 1 minute.</documentation>
               </annotation>
            </attribute>
            <attribute name="expectedLevel" type="string" use="required">
               <annotation>
                  <documentation>Expected isolation level (should match to cache configuration). Supported values are [READ_COMMITTED, REPEATABLE_READ]</documentation>
               </annotation>
            </attribute>
            <attribute name="readers" type="rg:int">
               <annotation>
                  <documentation>Number of concurrent threads that try to retrieve the value. Default is 10.</documentation>
               </annotation>
            </attribute>
            <attribute name="transactionSize" type="rg:int">
               <annotation>
                  <documentation>Number of reads executed inside on transaction. Default is 30.</documentation>
               </annotation>
            </attribute>
            <attribute name="writers" type="rg:int">
               <annotation>
                  <documentation>Number of concurrent threads that modify the value. Default is 2.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="JMXClusterValidation">
      <annotation>
         <documentation>Validates formation of the cluster remotely via JMX.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:AbstractMaster">
            <attribute name="jmxConnectionTimeout" type="rg:long__org_radargun_config_TimeConverter">
               <annotation>
                  <documentation>JMX connection timeout. Default is 3 seconds.</documentation>
               </annotation>
            </attribute>
            <attribute name="prop1" type="string">
               <annotation>
                  <documentation>Generic property 1.</documentation>
               </annotation>
            </attribute>
            <attribute name="prop2" type="string">
               <annotation>
                  <documentation>Generic property 1.</documentation>
               </annotation>
            </attribute>
            <attribute name="prop3" type="string">
               <annotation>
                  <documentation>Generic property 1.</documentation>
               </annotation>
            </attribute>
            <attribute name="slaves" type="string">
               <annotation>
                  <documentation>Indices of slaves that should be up. Default is empty.</documentation>
               </annotation>
            </attribute>
            <attribute name="waitTimeout" type="rg:long__org_radargun_config_TimeConverter">
               <annotation>
                  <documentation>Cluster validation timeout. Default is 1 minute.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="JMXClusterValidationPrepare">
      <annotation>
         <documentation>Collects configuration for JMXClusterValidationStage.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:AbstractDist">
            <attribute name="jmxConnectionTimeout" type="rg:long__org_radargun_config_TimeConverter">
               <annotation>
                  <documentation>JMX Connection timeout. Default is 3 seconds.</documentation>
               </annotation>
            </attribute>
            <attribute name="prop1" type="string">
               <annotation>
                  <documentation>Generic property 1.</documentation>
               </annotation>
            </attribute>
            <attribute name="prop2" type="string">
               <annotation>
                  <documentation>Generic property 2.</documentation>
               </annotation>
            </attribute>
            <attribute name="prop3" type="string">
               <annotation>
                  <documentation>Generic property 3.</documentation>
               </annotation>
            </attribute>
            <attribute name="waitTimeout" type="rg:long__org_radargun_config_TimeConverter">
               <annotation>
                  <documentation>Cluster validation timeout. Default is 1 minute.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="JProfiler">
      <annotation>
         <documentation>Stage for invoking operations on JProfiler.
Remember to set up JVM args: "-agentpath:/path/to/libjprofilerti.so=offline,id=100,config=/path/to/configuration.xml"</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:AbstractDist">
            <attribute name="operations" type="string" use="required">
               <annotation>
                  <documentation>Operations that should be invoked on the Controller</documentation>
               </annotation>
            </attribute>
            <attribute name="resetCPUStats" type="rg:boolean">
               <annotation>
                  <documentation>If true, any previously accumulated CPU profiling data will be discarded. If false, CPU data willbe accumulated across pairs of invocations of START_CPU_RECORDING and STOP_CPU_RECORDING. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="resetMemoryStats" type="rg:boolean">
               <annotation>
                  <documentation>If true, any previously accumulated Memory profiling data will be discarded. If false, CPU data willbe accumulated across pairs of invocations of START_MEMORY_RECORDING and STOP_MEMORY_RECORDING. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="snapshotDirectory" type="string">
               <annotation>
                  <documentation>Directory where the snapshot should be written (for SAVE_SNAPSHOT).</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="Kill">
      <annotation>
         <documentation>Shutdowns or kills (simulates node crash) one or more nodes.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:AbstractDist">
            <attribute name="async" type="rg:boolean">
               <annotation>
                  <documentation>If set to true the benchmark will not wait until the node is killed. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="delayExecution" type="rg:long__org_radargun_config_TimeConverter">
               <annotation>
                  <documentation>If this value is positive the stage will spawn a thread which will kill the node after the delay. The stage will not wait for anything. By default the kill is immediate and synchronous.</documentation>
               </annotation>
            </attribute>
            <attribute name="role" type="rg:org_radargun_stages_helpers_RoleHelper_Role">
               <annotation>
                  <documentation>Instead of specifying concrete slaves we may choose a victim based on his role in the cluster. Supported roles are [COORDINATOR, BRIDGE]. By default no role is specified.</documentation>
               </annotation>
            </attribute>
            <attribute name="tearDown" type="rg:boolean">
               <annotation>
                  <documentation>If set to true, the nodes should be shutdown. Default is false = simulate node crash.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <simpleType name="org_radargun_stages_helpers_RoleHelper_Role">
      <union>
         <simpleType>
            <restriction base="string">
               <enumeration value="COORDINATOR"/>
               <enumeration value="BRIDGE"/>
            </restriction>
         </simpleType>
         <simpleType>
            <restriction base="string">
               <pattern value="[$#]\{.*\}"/>
            </restriction>
         </simpleType>
      </union>
   </simpleType>
   <complexType name="LoadFile">
      <annotation>
         <documentation>Loads the contents of a file into the cache.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:AbstractDist">
            <attribute name="bucket" type="string">
               <annotation>
                  <documentation>The name of the bucket where keys are written. The default is null</documentation>
               </annotation>
            </attribute>
            <attribute name="filePath" type="string" use="required">
               <annotation>
                  <documentation>Full pathname to the file.</documentation>
               </annotation>
            </attribute>
            <attribute name="printWriteStatistics" type="rg:boolean">
               <annotation>
                  <documentation>If true, then the time for each put operation is written to the logs. The default is false</documentation>
               </annotation>
            </attribute>
            <attribute name="stringData" type="rg:boolean">
               <annotation>
                  <documentation>If true, then String objects are written to the cache. The default is false</documentation>
               </annotation>
            </attribute>
            <attribute name="valueSize" type="rg:int">
               <annotation>
                  <documentation>The size of the values to put into the cache from the contents of the file. The default size is 1MB (1024 * 1024)</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="MapReduce">
      <annotation>
         <documentation>Stage which executes a MapReduce Task against all keys in the cache.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:AbstractDist">
            <attribute name="collatorFqn" type="string">
               <annotation>
                  <documentation>Fully qualified class name of the org.infinispan.distexec.mapreduce.Collator implementation to execute. The default is null.</documentation>
               </annotation>
            </attribute>
            <attribute name="collatorParams" type="string">
               <annotation>
                  <documentation>A String in the form of 'methodName:methodParameter;methodName1:methodParameter1' that allows invoking a method on the Collator Object. The method must be public and take a String parameter. The default is null.</documentation>
               </annotation>
            </attribute>
            <attribute name="distributeReducePhase" type="rg:boolean">
               <annotation>
                  <documentation>Boolean value that determines if the Reduce phase of the MapReduceTask is distributed. The default is true.</documentation>
               </annotation>
            </attribute>
            <attribute name="mapperFqn" type="string" use="required">
               <annotation>
                  <documentation>Fully qualified class name of the org.infinispan.distexec.mapreduce.Mapper implementation to execute.</documentation>
               </annotation>
            </attribute>
            <attribute name="mapperParams" type="string">
               <annotation>
                  <documentation>A String in the form of 'methodName:methodParameter;methodName1:methodParameter1' that allows invoking a method on the Mapper Object. The method must be public and take a String parameter. The default is null.</documentation>
               </annotation>
            </attribute>
            <attribute name="printResult" type="rg:boolean">
               <annotation>
                  <documentation>Boolean value that determines if the final results of the MapReduceTask are written to the log of the first slave node. The default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="reducerFqn" type="string" use="required">
               <annotation>
                  <documentation>Fully qualified class name of the org.infinispan.distexec.mapreduce.Reducer implementation to execute.</documentation>
               </annotation>
            </attribute>
            <attribute name="reducerParams" type="string">
               <annotation>
                  <documentation>A String in the form of 'methodName:methodParameter;methodName1:methodParameter1' that allows invoking a method on the Reducer Object. The method must be public and take a String parameter. The default is null.</documentation>
               </annotation>
            </attribute>
            <attribute name="storeResultInCache" type="rg:boolean">
               <annotation>
                  <documentation>Boolean value that determines if the final results of the MapReduceTask are stored in the cache at key MAPREDUCE_RESULT_KEY. Enabling this feature will require extra DRAM usage. The default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="timeout" type="rg:long">
               <annotation>
                  <documentation>A tiemout value for the remote communication that happens during a Map/Reduce task. The default is zero which means to wait forever.</documentation>
               </annotation>
            </attribute>
            <attribute name="unit" type="rg:java_util_concurrent_TimeUnit">
               <annotation>
                  <documentation>The java.util.concurrent.TimeUnit to use with the timeout property. The default is TimeUnit.MILLISECONDS</documentation>
               </annotation>
            </attribute>
            <attribute name="useIntermediateSharedCache" type="rg:boolean">
               <annotation>
                  <documentation>Boolean value that determines if the intermediate results of the MapReduceTask are shared. The default is true.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <simpleType name="long">
      <union>
         <simpleType>
            <restriction base="long"/>
         </simpleType>
         <simpleType>
            <restriction base="string">
               <pattern value="[$#]\{.*\}"/>
            </restriction>
         </simpleType>
      </union>
   </simpleType>
   <simpleType name="java_util_concurrent_TimeUnit">
      <union>
         <simpleType>
            <restriction base="string">
               <enumeration value="NANOSECONDS"/>
               <enumeration value="MICROSECONDS"/>
               <enumeration value="MILLISECONDS"/>
               <enumeration value="SECONDS"/>
               <enumeration value="MINUTES"/>
               <enumeration value="HOURS"/>
               <enumeration value="DAYS"/>
            </restriction>
         </simpleType>
         <simpleType>
            <restriction base="string">
               <pattern value="[$#]\{.*\}"/>
            </restriction>
         </simpleType>
      </union>
   </simpleType>
   <complexType name="ParallelStartKill">
      <annotation>
         <documentation>The stage start and kills some nodes concurrently (without waiting for each other).</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:AbstractStart">
            <attribute name="kill" type="string">
               <annotation>
                  <documentation>Set of slaves which should be killed in this stage. Default is empty.</documentation>
               </annotation>
            </attribute>
            <attribute name="reachable" type="string">
               <annotation>
                  <documentation>Applicable only for cache wrappers with Partitionable feature. Set of slaves that should bereachable from the new node. Default is empty.</documentation>
               </annotation>
            </attribute>
            <attribute name="role" type="rg:org_radargun_stages_helpers_RoleHelper_Role">
               <annotation>
                  <documentation>Another way how to specify killed nodes is by role. Available roles are [COORDINATOR, BRIDGE]. By default this is not used.</documentation>
               </annotation>
            </attribute>
            <attribute name="start" type="string">
               <annotation>
                  <documentation>Set of slaves which should be started in this stage. Default is empty.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="Query">
      <annotation>
         <documentation>Stage which executes a Query using Infinispan-query API against all keys in the cache.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:StressTest">
            <attribute name="isWildcardQuery" type="rg:boolean" use="required">
               <annotation>
                  <documentation>Boolean variable which shows whether the keyword query should be done or wildcard.</documentation>
               </annotation>
            </attribute>
            <attribute name="matching" type="string" use="required">
               <annotation>
                  <documentation>The matching string which should be used for querying.</documentation>
               </annotation>
            </attribute>
            <attribute name="onField" type="string" use="required">
               <annotation>
                  <documentation>The name of the field for which the query should be executed.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="RandomData">
      <annotation>
         <documentation>Generates random data to fill the cache.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:AbstractDist">
            <attribute name="bucket" type="string">
               <annotation>
                  <documentation>The name of the bucket where keys are written. The default is null</documentation>
               </annotation>
            </attribute>
            <attribute name="limitWordCount" type="rg:boolean">
               <annotation>
                  <documentation>If true, then the random word generator selects a word from a pre-defined list. The default is false</documentation>
               </annotation>
            </attribute>
            <attribute name="maxWordCount" type="rg:int">
               <annotation>
                  <documentation>The maximum number of words to generate in the pre-defined list of words used with limitWordCount.The default is 100.</documentation>
               </annotation>
            </attribute>
            <attribute name="maxWordLength" type="rg:int">
               <annotation>
                  <documentation>The maximum number of characters allowed in a word. The default is 20.</documentation>
               </annotation>
            </attribute>
            <attribute name="printWriteStatistics" type="rg:boolean">
               <annotation>
                  <documentation>If true, then the time for each put operation is written to the logs. The default is false</documentation>
               </annotation>
            </attribute>
            <attribute name="ramPercentage" type="rg:double">
               <annotation>
                  <documentation>A double that represents the percentage of the total Java heap used to determine the amount of data to put into the cache.Either valueCount or ramPercentageDataSize should be specified, but not both.</documentation>
               </annotation>
            </attribute>
            <attribute name="randomSeed" type="rg:long">
               <annotation>
                  <documentation>The seed to use for the java.util.Random object. The default is the return value of Calendar.getInstance().getWeekYear().</documentation>
               </annotation>
            </attribute>
            <attribute name="shareWords" type="rg:boolean">
               <annotation>
                  <documentation>If false, then each node in the cluster generates a list of maxWordCount words. If true, then each node in the cluster shares the same list of words. The default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="stringData" type="rg:boolean">
               <annotation>
                  <documentation>If true, then String objects with printable characters are written to the cache.The default is false</documentation>
               </annotation>
            </attribute>
            <attribute name="targetMemoryUse" type="rg:long">
               <annotation>
                  <documentation>The number of bytes to write to the cache when the valueByteOverhead, stringData, and valueSize are taken into account. The code assumes this is an even multiple of valueSize plus valueByteOverhead. If stringData is true, then the code assumes this is an even multiple of (2 * valueSize) plus valueByteOverhead.</documentation>
               </annotation>
            </attribute>
            <attribute name="valueByteOverhead" type="rg:int">
               <annotation>
                  <documentation>The bytes used over the size of the key and value when putting to the cache. By default the stage retrieves the value from cache wrapper automatically.</documentation>
               </annotation>
            </attribute>
            <attribute name="valueCount" type="rg:long">
               <annotation>
                  <documentation>The number of values of valueSize to write to the cache. Either valueCount or ramPercentageDataSize should be specified, but not both.</documentation>
               </annotation>
            </attribute>
            <attribute name="valueSize" type="rg:int">
               <annotation>
                  <documentation>The size of the values to put into the cache. The default size is 1MB (1024 * 1024).</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <simpleType name="double">
      <union>
         <simpleType>
            <restriction base="double"/>
         </simpleType>
         <simpleType>
            <restriction base="string">
               <pattern value="[$#]\{.*\}"/>
            </restriction>
         </simpleType>
      </union>
   </simpleType>
   <complexType name="ReportBackgroundStats">
      <annotation>
         <documentation>Generates reports from Statistics.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:AbstractMaster">
            <attribute name="chartHeight" type="rg:int">
               <annotation>
                  <documentation>Height of the produced charts. Default is 600px.</documentation>
               </annotation>
            </attribute>
            <attribute name="chartWidth" type="rg:int">
               <annotation>
                  <documentation>Width of the produced charts. Default is 800px.</documentation>
               </annotation>
            </attribute>
            <attribute name="generateIntervalTimeData" type="rg:boolean">
               <annotation>
                  <documentation>Generate files for verifying time synchronization of slaves. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="ignore" type="string">
               <annotation>
                  <documentation>Set of slaves whose results should be ignored. Default is empty.</documentation>
               </annotation>
            </attribute>
            <attribute name="targetDir" type="string">
               <annotation>
                  <documentation>Directory where the reports should be written. Default is 'reports'</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="ReportJVMMonitor">
      <annotation>
         <documentation>Generate charts for JVM statistics on each slave node.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:AbstractMaster">
            <attribute name="reportPrefix" type="string">
               <annotation>
                  <documentation>A prefix that will be added to the report name. Default is null.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="SetLogLevel">
      <annotation>
         <documentation>Debugging stage: changes log priorities</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:AbstractDist">
            <attribute name="package" type="string" use="required">
               <annotation>
                  <documentation>The package or class which should be affected.</documentation>
               </annotation>
            </attribute>
            <attribute name="pop" type="rg:boolean">
               <annotation>
                  <documentation>If set to true, instead of setting the priority directly just undo the last priority change. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="priority" type="string">
               <annotation>
                  <documentation>The new priority that should be used. No defaults.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="SetPartitions">
      <annotation>
         <documentation>Partitions the cluster into several parts that cannot communicate.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:AbstractDist">
            <attribute name="partitions" type="string" use="required">
               <annotation>
                  <documentation>Set of sets of partitions,e.g. [0,1],[2] makes two partitions, one with slaves 0 and 1 and second with slave 2 alone.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="SingleTXCheck">
      <annotation>
         <documentation>Paired with SingleTXLoadStage. Checks that the previous stage had the expected result</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:AbstractDist">
            <attribute name="commitSlave" type="string">
               <annotation>
                  <documentation>Indices of slaves which should have committed the transaction (others rolled back). Default is all committed.</documentation>
               </annotation>
            </attribute>
            <attribute name="commitThread" type="string">
               <annotation>
                  <documentation>Indices of threads which should have committed the transaction (others rolled back). Default is all committed.</documentation>
               </annotation>
            </attribute>
            <attribute name="deleted" type="rg:boolean">
               <annotation>
                  <documentation>If this is set to true, REMOVE operation should have been executed. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="transactionSize" type="rg:int">
               <annotation>
                  <documentation>Expected size of the transcation.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="SingleTXLoad">
      <annotation>
         <documentation>Performs single transaction with requests on key0 .. keyN in multiple threads on multiple slaves.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:AbstractDist">
            <attribute name="commitSlave" type="string">
               <annotation>
                  <documentation>Indices of slaves which should commit the transaction (others will rollback). Default is all commit.</documentation>
               </annotation>
            </attribute>
            <attribute name="commitThread" type="string">
               <annotation>
                  <documentation>Indices of threads which should commit the transaction (others will rollback). Default is all commit.</documentation>
               </annotation>
            </attribute>
            <attribute name="delete" type="rg:boolean">
               <annotation>
                  <documentation>The threads by default do the PUT request, if this is set to true they will do REMOVE. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="duration" type="rg:long__org_radargun_config_TimeConverter">
               <annotation>
                  <documentation>The enforced duration of the transaction. If &gt; 0 the threads will sleep for duration/transactionSize after each request. Default is 0.</documentation>
               </annotation>
            </attribute>
            <attribute name="threads" type="rg:int">
               <annotation>
                  <documentation>Number of threads that should execute the transaction. Default is 1.</documentation>
               </annotation>
            </attribute>
            <attribute name="transactionSize" type="rg:int">
               <annotation>
                  <documentation>Number of request in the transaction. Default is 20.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="Sleep">
      <annotation>
         <documentation>Sleeps specified number of milliseconds.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:AbstractMaster">
            <attribute name="time" type="rg:long__org_radargun_config_TimeConverter" use="required">
               <annotation>
                  <documentation>Sleep duration.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="StackTraceWatchdog">
      <annotation>
         <documentation>Debug usage only. Periodically check for all thread stack traces and print them out.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:AbstractDist">
            <attribute name="asyncLogging" type="rg:boolean">
               <annotation>
                  <documentation>If set to true the watchdog will not use standard logging for output but will push the output to queue consumed (logged) by another thread. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="mask" type="string">
               <annotation>
                  <documentation>If set, only those threads which have this mask in the name will be checked. Default is not set.</documentation>
               </annotation>
            </attribute>
            <attribute name="onlyStuck" type="rg:boolean">
               <annotation>
                  <documentation>By default the check will print out only those threads which appear to be stuck. If this is set to false all threads will be printed out. Default is true.</documentation>
               </annotation>
            </attribute>
            <attribute name="period" type="rg:long__org_radargun_config_TimeConverter">
               <annotation>
                  <documentation>The delay between consecutive checks. Default is 10 seconds.</documentation>
               </annotation>
            </attribute>
            <attribute name="shortStack" type="rg:int">
               <annotation>
                  <documentation>Threads with stack lower or equal to this value are never printed (because usually such threads are parked in thread pools). Default is 10.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="StartBackgroundStatistics">
      <annotation>
         <documentation>Starts collection of statistics from background threads and cache size.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:AbstractDist">
            <attribute name="statsIterationDuration" type="rg:long__org_radargun_config_TimeConverter">
               <annotation>
                  <documentation>Delay between statistics snapshots. Default is 5 seconds.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="StartBackgroundStressors">
      <annotation>
         <documentation>Starts background stressor threads.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:AbstractDist">
            <attribute name="bucketId" type="string">
               <annotation>
                  <documentation>Bucket where the entries should be inserted. Default is </documentation>
               </annotation>
            </attribute>
            <attribute name="delayBetweenRequests" type="rg:long__org_radargun_config_TimeConverter">
               <annotation>
                  <documentation>Time between consecutive requests of one stressor thread. Default is 0.</documentation>
               </annotation>
            </attribute>
            <attribute name="entrySize" type="rg:int">
               <annotation>
                  <documentation>Size of value used in the entry. Default is 1024 bytes.</documentation>
               </annotation>
            </attribute>
            <attribute name="gets" type="rg:int">
               <annotation>
                  <documentation>Ratio of GET requests. Default is 2.</documentation>
               </annotation>
            </attribute>
            <attribute name="loadDataForDeadSlaves" type="string">
               <annotation>
                  <documentation>List of slaves whose data should be loaded by other threads because these slaves are not alive. Default is empty.</documentation>
               </annotation>
            </attribute>
            <attribute name="loadDataOnSlaves" type="string">
               <annotation>
                  <documentation>List of slaves where the data should be loaded (others immediately start executing requests). Default is all live slaves).</documentation>
               </annotation>
            </attribute>
            <attribute name="loadOnly" type="rg:boolean">
               <annotation>
                  <documentation>If set to true, the stressor does not execute any requests after loading the data. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="loadWithPutIfAbsent" type="rg:boolean">
               <annotation>
                  <documentation>Use conditional putIfAbsent instead of simple put for loading the keys. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="numEntries" type="rg:int">
               <annotation>
                  <documentation>Amount of entries (key-value pairs) inserted into the cache. Default is 1024.</documentation>
               </annotation>
            </attribute>
            <attribute name="numThreads" type="rg:int">
               <annotation>
                  <documentation>Number of stressor threads. Default is 10.</documentation>
               </annotation>
            </attribute>
            <attribute name="puts" type="rg:int">
               <annotation>
                  <documentation>Ratio of PUT requests. Default is 1.</documentation>
               </annotation>
            </attribute>
            <attribute name="removes" type="rg:int">
               <annotation>
                  <documentation>Ratio of REMOVE requests. Default is 0.</documentation>
               </annotation>
            </attribute>
            <attribute name="transactionSize" type="rg:int">
               <annotation>
                  <documentation>Amount of request wrapped into single transaction. By default transactions are not used (explicitely).</documentation>
               </annotation>
            </attribute>
            <attribute name="waitUntilLoaded" type="rg:boolean">
               <annotation>
                  <documentation>Specifies whether the stage should wait until the entries are loaded by stressor threads. Default is true.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="StartCluster">
      <annotation>
         <documentation>Starts cache wrappers on specified slaves</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:AbstractStart">
            <attribute name="delayAfterFirstSlaveStarts" type="rg:long__org_radargun_config_TimeConverter">
               <annotation>
                  <documentation>Delay (staggering) after first slave's start is initiated. Default is 5s</documentation>
               </annotation>
            </attribute>
            <attribute name="delayBetweenStartingSlaves" type="rg:long__org_radargun_config_TimeConverter">
               <annotation>
                  <documentation>Delay between initiating start of i-th and (i+1)-th slave. Default is 500 ms</documentation>
               </annotation>
            </attribute>
            <attribute name="expectNumSlaves" type="rg:java_lang_Integer">
               <annotation>
                  <documentation>The number of slaves that should be up after all slaves are started. Applicable only with validateCluster=true. Default is all slaves in the cluster (in the same site in case of multi-site configuration).</documentation>
               </annotation>
            </attribute>
            <attribute name="reachable" type="string">
               <annotation>
                  <documentation>Set of slaves that should be reachable to the newly spawned slaves (see Partitionable feature for details). Default is all slaves.</documentation>
               </annotation>
            </attribute>
            <attribute name="staggerSlaveStartup" type="rg:boolean">
               <annotation>
                  <documentation>If set to true, the slaves will not be started in one moment but the startup will be delayed. Default is true.</documentation>
               </annotation>
            </attribute>
            <attribute name="validateCluster" type="rg:boolean">
               <annotation>
                  <documentation>Specifies whether the cluster formation should be checked after cache wrapper startup. Default is true.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <simpleType name="java_lang_Integer">
      <union>
         <simpleType>
            <restriction base="integer"/>
         </simpleType>
         <simpleType>
            <restriction base="string">
               <pattern value="[$#]\{.*\}"/>
            </restriction>
         </simpleType>
      </union>
   </simpleType>
   <complexType name="StartJVMMonitor">
      <annotation>
         <documentation>Starts collecting JVM statistics locally on each slave node.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:AbstractDist">
            <attribute name="frequency" type="rg:int">
               <annotation>
                  <documentation>An integer that specifies the frequency that statistics are collected. The default is one.</documentation>
               </annotation>
            </attribute>
            <attribute name="interfaceName" type="string">
               <annotation>
                  <documentation>Specifies the network interface where statistics are gathered. If not specified, then statistics are not collected.</documentation>
               </annotation>
            </attribute>
            <attribute name="timeUnit" type="rg:java_util_concurrent_TimeUnit">
               <annotation>
                  <documentation>Specifies the time unit that statistics are collected. One of: MILLISECONDS, SECONDS, MINUTES, or HOURS. The default is SECONDS.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="StopBackgroundStatistics">
      <annotation>
         <documentation>Stop Statistics and return collected statistics to master.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:AbstractDist"/>
      </complexContent>
   </complexType>
   <complexType name="StopBackgroundStressors">
      <annotation>
         <documentation>Stop BackgroundStressors.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:AbstractDist">
            <attribute name="waitUntilLoaded" type="rg:boolean">
               <annotation>
                  <documentation>If true, the phase does not finish until all stressors stop loading its data. Default is false.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="StopJVMMonitor">
      <annotation>
         <documentation>Stop collecting JVM statistics on each slave node and return collected statistics to the master node.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:AbstractDist"/>
      </complexContent>
   </complexType>
   <complexType name="StressTestWarmup">
      <annotation>
         <documentation>Warmup stage for stress test benchmarks.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:StressTest"/>
      </complexContent>
   </complexType>
   <complexType name="TpccBenchmark">
      <annotation>
         <documentation>Simulate the activities found in complex OLTP application environments.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:AbstractDist">
            <attribute name="arrivalRate" type="rg:double">
               <annotation>
                  <documentation>Average arrival rate of the transactions to the system. Default is 0.</documentation>
               </annotation>
            </attribute>
            <attribute name="numThreads" type="rg:int">
               <annotation>
                  <documentation>Number of threads that will work on this slave. Default is 10.</documentation>
               </annotation>
            </attribute>
            <attribute name="orderStatusWeight" type="rg:double">
               <annotation>
                  <documentation>Percentage of Order Status transactions. Default is 5 %.</documentation>
               </annotation>
            </attribute>
            <attribute name="paymentWeight" type="rg:double">
               <annotation>
                  <documentation>Percentage of Payment transactions. Default is 45 %.</documentation>
               </annotation>
            </attribute>
            <attribute name="perThreadSimulTime" type="rg:long">
               <annotation>
                  <documentation>Total time (in seconds) of simulation for each stressor thread. Default is 180.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="TpccPopulation">
      <annotation>
         <documentation>This stage shuld be run before the TpccBenchmarkStage.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:AbstractDist">
            <attribute name="cIdMask" type="rg:long">
               <annotation>
                  <documentation>Mask used to generate non-uniformly distributed random customer numbers. Default is 1023.</documentation>
               </annotation>
            </attribute>
            <attribute name="cLastMask" type="rg:long">
               <annotation>
                  <documentation>Mask used to generate non-uniformly distributed random customer last names. Default is 255.</documentation>
               </annotation>
            </attribute>
            <attribute name="numWarehouses" type="rg:int">
               <annotation>
                  <documentation>Number of Warehouses. Default is 1.</documentation>
               </annotation>
            </attribute>
            <attribute name="olIdMask" type="rg:long">
               <annotation>
                  <documentation>Mask used to generate non-uniformly distributed random item numbers. Default is 8191.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="WaitForTopologyEvent">
      <annotation>
         <documentation>Waits until some event occurs. Note that the initial rehash is not recorded in this manner, therefore waiting for that will result in timeout.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:AbstractDist">
            <attribute name="condition" type="rg:org_radargun_stages_WaitForTopologyEventStage_Condition">
               <annotation>
                  <documentation>Condition we are waiting for. Default is END.</documentation>
               </annotation>
            </attribute>
            <attribute name="maxMembers" type="rg:int">
               <annotation>
                  <documentation>The maximum number of slaves that participated in this event. Default is indefinite.</documentation>
               </annotation>
            </attribute>
            <attribute name="minMembers" type="rg:int">
               <annotation>
                  <documentation>The minimum number of slaves that participated in this event. Default is 0.</documentation>
               </annotation>
            </attribute>
            <attribute name="set" type="rg:boolean">
               <annotation>
                  <documentation>Set last state before finishing. Default is true.</documentation>
               </annotation>
            </attribute>
            <attribute name="timeout" type="rg:long__org_radargun_config_TimeConverter">
               <annotation>
                  <documentation>How long should we wait until we give up with error, 0 means indefinitely. Default is 10 minutes.</documentation>
               </annotation>
            </attribute>
            <attribute name="type" type="rg:org_radargun_stages_WaitForTopologyEventStage_Type">
               <annotation>
                  <documentation>Type of event we are detecting. Default is REHASH.</documentation>
               </annotation>
            </attribute>
            <attribute name="wait" type="rg:boolean">
               <annotation>
                  <documentation>Wait for the event to happen. Default is true.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <simpleType name="org_radargun_stages_WaitForTopologyEventStage_Condition">
      <union>
         <simpleType>
            <restriction base="string">
               <enumeration value="START"/>
               <enumeration value="END"/>
            </restriction>
         </simpleType>
         <simpleType>
            <restriction base="string">
               <pattern value="[$#]\{.*\}"/>
            </restriction>
         </simpleType>
      </union>
   </simpleType>
   <simpleType name="org_radargun_stages_WaitForTopologyEventStage_Type">
      <union>
         <simpleType>
            <restriction base="string">
               <enumeration value="REHASH"/>
               <enumeration value="TOPOLOGY_UPDATE"/>
            </restriction>
         </simpleType>
         <simpleType>
            <restriction base="string">
               <pattern value="[$#]\{.*\}"/>
            </restriction>
         </simpleType>
      </union>
   </simpleType>
   <complexType name="WriteSkewCheck">
      <annotation>
         <documentation>Stage checking the write skew detection in transactional caches.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:Check">
            <attribute name="duration" type="rg:long__org_radargun_config_TimeConverter">
               <annotation>
                  <documentation>Duration of the test. Default is 1 minute.</documentation>
               </annotation>
            </attribute>
            <attribute name="testNull" type="rg:boolean">
               <annotation>
                  <documentation>Should write skew between null value and first value be tested? Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="threads" type="rg:int">
               <annotation>
                  <documentation>Number of threads overwriting concurrently the entry. Default is 10.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="XSReplCheck">
      <annotation>
         <documentation>Checks data loaded in XSReplLoadStage.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:CheckData">
            <attribute name="valuePostFix" type="string">
               <annotation>
                  <documentation>Postfix part of the value contents. Default is empty string.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="XSReplLoad">
      <annotation>
         <documentation>Loads data into the cache with input cache name encoded into the value.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:AbstractDist">
            <attribute name="delete" type="rg:boolean">
               <annotation>
                  <documentation>If set to true, the entries are removed instead of being inserted. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="numEntries" type="rg:int" use="required">
               <annotation>
                  <documentation>Amount of entries that should be inserted into the cache.</documentation>
               </annotation>
            </attribute>
            <attribute name="valuePostFix" type="string">
               <annotation>
                  <documentation>String encoded into the value so that the entry may be distinguished from entries loaded in different load stages. Default is empty string.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <complexType abstract="true" name="abstractProduct">
      <sequence>
         <element maxOccurs="unbounded" minOccurs="1" name="config">
            <complexType>
               <sequence>
                  <element maxOccurs="1" minOccurs="0" name="wrapper" type="rg:wrapper"/>
                  <element maxOccurs="unbounded" minOccurs="0" name="site">
                     <complexType>
                        <sequence>
                           <element maxOccurs="1" minOccurs="0" name="wrapper" type="rg:wrapper"/>
                        </sequence>
                        <attribute name="name" type="string"/>
                        <attribute name="config" type="string"/>
                        <attribute name="slaves" type="string"/>
                        <attribute name="cache" type="string"/>
                     </complexType>
                  </element>
               </sequence>
               <attribute name="name" type="string"/>
               <attribute name="file" type="string"/>
               <attribute name="cache" type="string"/>
               <attribute name="wrapper" type="string"/>
            </complexType>
         </element>
      </sequence>
   </complexType>
   <complexType name="wrapper">
      <sequence>
         <element maxOccurs="unbounded" minOccurs="0" name="property">
            <complexType>
               <attribute name="name" type="string" use="required"/>
               <attribute name="value" type="string" use="required"/>
            </complexType>
         </element>
      </sequence>
      <attribute name="class" type="string"/>
   </complexType>
   <complexType name="product">
      <complexContent>
         <extension base="rg:abstractProduct">
            <attribute name="name" type="string"/>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="hazelcast2">
      <complexContent>
         <extension base="rg:abstractProduct"/>
      </complexContent>
   </complexType>
   <complexType name="hazelcast3">
      <complexContent>
         <extension base="rg:abstractProduct"/>
      </complexContent>
   </complexType>
   <complexType name="infinispan4">
      <complexContent>
         <extension base="rg:abstractProduct"/>
      </complexContent>
   </complexType>
   <complexType name="infinispan50">
      <complexContent>
         <extension base="rg:abstractProduct"/>
      </complexContent>
   </complexType>
   <complexType name="infinispan51">
      <complexContent>
         <extension base="rg:abstractProduct"/>
      </complexContent>
   </complexType>
   <complexType name="infinispan52">
      <complexContent>
         <extension base="rg:abstractProduct"/>
      </complexContent>
   </complexType>
   <complexType name="infinispan53">
      <complexContent>
         <extension base="rg:abstractProduct"/>
      </complexContent>
   </complexType>
   <complexType name="infinispan60">
      <complexContent>
         <extension base="rg:abstractProduct"/>
      </complexContent>
   </complexType>
   <complexType name="jgroups">
      <complexContent>
         <extension base="rg:abstractProduct"/>
      </complexContent>
   </complexType>
   <complexType name="jbosscache2">
      <complexContent>
         <extension base="rg:abstractProduct"/>
      </complexContent>
   </complexType>
   <complexType name="jbosscache3">
      <complexContent>
         <extension base="rg:abstractProduct"/>
      </complexContent>
   </complexType>
   <complexType name="ehcache25">
      <complexContent>
         <extension base="rg:abstractProduct"/>
      </complexContent>
   </complexType>
   <complexType name="ehcache26">
      <complexContent>
         <extension base="rg:abstractProduct"/>
      </complexContent>
   </complexType>
   <complexType name="terracota3">
      <complexContent>
         <extension base="rg:abstractProduct"/>
      </complexContent>
   </complexType>
   <complexType name="chm">
      <complexContent>
         <extension base="rg:abstractProduct"/>
      </complexContent>
   </complexType>
   <complexType name="coherence3">
      <complexContent>
         <extension base="rg:abstractProduct"/>
      </complexContent>
   </complexType>
   <complexType name="jdg60">
      <complexContent>
         <extension base="rg:abstractProduct"/>
      </complexContent>
   </complexType>
   <complexType name="jdg61">
      <complexContent>
         <extension base="rg:abstractProduct"/>
      </complexContent>
   </complexType>
   <complexType name="jdg62">
      <complexContent>
         <extension base="rg:abstractProduct"/>
      </complexContent>
   </complexType>
</schema>
