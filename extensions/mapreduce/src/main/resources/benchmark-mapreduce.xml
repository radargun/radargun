<benchmark xmlns="urn:radargun:benchmark:3.0">

    <!-- Specifies where should the master open socket -->
    <master bindAddress="${master.address:127.0.0.1}" port="${master.port:2103}"/>

    <!-- List of cluster configurations where the benchmark should run -->
    <clusters>
        <cluster size="${cluster_size:2}"/>
    </clusters>

    <!-- List of configurations of the services -->
    <configurations>
        <config name="Infinispan 7.0 - distributed">
            <setup plugin="infinispan70">
                <embedded xmlns="urn:radargun:plugins:infinispan70:3.0" file="dist-sync.xml"
                map-reduce-distributed-reduce-phase="true"
                map-reduce-use-intermediate-shared-cache="true"/>
            </setup>
        </config>
    </configurations>

    <!-- Sequence of stages executed on the cluster -->
    <rg:scenario xmlns:rg="urn:radargun:benchmark:3.0"
                 xmlns:cache="urn:radargun:stages:cache:3.0"
                 xmlns:mapreduce="urn:radargun:stages:mapreduce:3.0"
                 xmlns="urn:radargun:stages:core:3.0">
        <!-- Start services on all nodes -->
        <service-start />

        <!-- Fill the cache with 100 randomly generated words consuming 1% of the JVM heap -->
        <cache:random-data
                value-size="${value_size:1024}"
                ram-percentage="${ram_percentage:0.01}"
                random-seed="13"
                string-data="true"
                limit-word-count="true"
                share-words="true"
                max-word-count="${max_word_count:100}"
                bucket="testCache"
        />

        <!-- Execute a Map/Reduce task that counts the words the number of time a word appears in the cache values  -->
        <mapreduce:map-reduce
                source-name="testCache"
                mapper-fqn="org.infinispan.demo.mapreduce.WordCountMapperEmitPerValue"
                reducer-fqn="org.infinispan.demo.mapreduce.WordCountReducer"
                combiner-fqn="org.infinispan.demo.mapreduce.WordCountReducer"
                print-result="${print_results:true}"
                timeout="60000"
                num-executions="${num_executions:5}"
                slaves="0"
        >
        </mapreduce:map-reduce>

        <!-- Stop services on all nodes -->
        <service-stop />
    </rg:scenario>

    <!-- How the statistics are reported -->
    <reports>
        <!-- Produce CSV statistics report -->
        <reporter type="csv"/>
        <!-- Produce HTML statistics report -->
        <reporter type="html"/>
    </reports>

</benchmark>