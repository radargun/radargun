<!-- RadarGun 3.0 benchmark -->
<benchmark xmlns="urn:radargun:benchmark:3.0">

   <!-- Specifies where should the master open socket  -->
   <master bindAddress="${master.address:127.0.0.1}" port="${master.port:2103}"/>

   <!-- List of cluster configurations where the benchmark should run-->
   <clusters>
      <cluster size="2" />
   </clusters>

   <!-- List of configurations of the services -->
   <configurations>
      <config name="Infinispan 6.0 - distributed">
         <setup plugin="infinispan60">
            <embedded xmlns="urn:radargun:plugins:infinispan60:3.0" file="dist-sync.xml" />
         </setup>
      </config>
   </configurations>

   <!-- Sequence of stages executed on the cluster -->
   <rg:scenario xmlns:rg="urn:radargun:benchmark:3.0"
                xmlns="urn:radargun:stages:core:3.0"
                xmlns:cache="urn:radargun:stages:cache:3.0">
      <!-- Start services on all nodes -->
      <service-start />
      <!-- Begin monitoring of CPU, memory usage and GC -->
      <jvm-monitor-start />

      <!-- Preload the cache with data -->
      <cache:load num-entries="5000"/>

      <!-- As the test is called 'warmup', performance statistics won't be reported -->
      <cache:basic-operations-test test-name="warmup" num-operations="100000" total-threads="10">
         <cache:key-selector>
            <cache:concurrent-keys total-entries="5000" />
         </cache:key-selector>
      </cache:basic-operations-test>

      <!-- Remove all data from the default cache -->
      <cache:clear />
      <!-- Again, preload the cache with data -->
      <cache:load num-entries="10000"/>

        <!-- The loop will increase number of threads but at most 10 times -->
      <rg:repeat times="10">
         <!-- Each threads should execute 1000 requests/s; 200 writes and 800 reads -->
         <cache:basic-operations-test test-name="stress-test" amend-test="true"
                                duration="10s"
                                total-threads="#{ 5 * ${repeat.counter} + 5 }">
            <!-- Terminate the test when we can't achieve 95% of expected throughput,
                 or if the mean time is 1 ms or more  -->
            <repeat-condition>
               <all>
                  <throughput-net on="BasicOperations.Put" over="#{ (5 * ${repeat.counter} + 5) * 200 * 95 / 100 }"/>
                  <mean on="BasicOperations.Put" below="1 ms" />
               </all>
            </repeat-condition>
            <cache:key-selector>
              <cache:concurrent-keys total-entries="10000"/>
           </cache:key-selector>
         </cache:basic-operations-test>
      </rg:repeat>

      <!-- Stop JVM monitoring -->
      <jvm-monitor-stop />
   </rg:scenario>

   <!-- How the statistics are reported -->
   <reports>
      <!-- Produce CSV statistics report -->
      <reporter type="csv" />
      <!-- Produce HTML statistics report -->
      <reporter type="html" />
   </reports>

</benchmark>
