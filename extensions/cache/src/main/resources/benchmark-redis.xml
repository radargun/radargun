<benchmark xmlns="urn:radargun:benchmark:3.0">
   <master bindAddress="${master.address:127.0.0.1}" port="${master.port:2103}"/>

   <clusters>
      <cluster size="3">
         <group name="client" size="3"/>
      </cluster>
   </clusters>

   <configurations>
      <config name="redis">
         <setup group="client" plugin="redis">
            <jedis xmlns="urn:radargun:plugins:redis:3.0" >
               <!-- Add the Redis servers addresses separated by comma -->
               <servers></servers>
               <max-pool-size>8</max-pool-size>
            </jedis>
         </setup>
      </config>
   </configurations>

   <rg:scenario xmlns:rg="urn:radargun:benchmark:3.0"
                xmlns="urn:radargun:stages:core:3.0"
                xmlns:cache="urn:radargun:stages:cache:3.0">

      <define var="numberOfEntries" value="4000000" />
      <define var="entrySize" value="1000" />
      <define var="numberOfThreads" value="64" />

      <jvm-monitor-start />
      <service-start groups="client"/>

      <cache:load groups="client" num-entries="${numberOfEntries}" entry-size="${entrySize}" num-threads="${numberOfThreads}" log-period="10000">
         <cache:key-generator>
            <cache:byte-array-key />
         </cache:key-generator>
         <cache:value-generator>
            <cache:byte-array />
         </cache:value-generator>
      </cache:load>

      <!-- hack to stop the connections of the previously used Jedis clients, cleaning up JedisPool -->
      <cache:clear />

      <cache:basic-operations-test groups="client" test-name="warmup" num-threads-per-node="${numberOfThreads}" duration="${warmup.duration:1m}" get-ratio="4" put-ratio="1">
         <cache:key-selector>
            <cache:concurrent-keys total-entries="${numberOfEntries}"/>
         </cache:key-selector>
      </cache:basic-operations-test>

      <!-- hack to stop the connections of the previously used Jedis clients, cleaning up JedisPool -->
      <cache:clear />

      <cache:basic-operations-test groups="client" test-name="stress-test" duration="${test.duration:5m}" num-threads-per-node="${numberOfThreads}"  get-ratio="4" put-ratio="1">
         <cache:key-selector>
            <cache:concurrent-keys total-entries="${numberOfEntries}"/>
         </cache:key-selector>
         <statistics>
            <common/>
         </statistics>
      </cache:basic-operations-test>

      <service-stop/>
   </rg:scenario>
   <cleanup check-threads="false"/>

   <reports>
      <reporter type="csv"/>
      <reporter type="html"/>
   </reports>

</benchmark>