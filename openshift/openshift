#!/bin/bash

if [ "x$RADARGUN_HOME" = "x" ]; then
  DIRNAME=`dirname $0`
  RADARGUN_HOME=`cd $DIRNAME/..; pwd`
fi;
export RADARGUN_HOME

TEST_PROJECT=${TEST_PROJECT:-"myprojectradargun"}
LOGIN_COMMAND=""
RADARGUN_IMAGE=radargun
FULL_IMAGE=${DOCKER_REGISTRY}/${TEST_PROJECT}/${RADARGUN_IMAGE}
RADARGUN_MAIN="radargun-main.${TEST_PROJECT}.svc"
CONFIG_DIR=${CONFIG_DIR:-"configs/"}
RADARGUN_CONFIG="library-dist-reads.xml"
DEFAULT_JAVA_OPTS="-XX:+UseG1GC -verbose:gc -XX:MaxGCPauseMillis=300 -XX:InitiatingHeapOccupancyPercent=70 -XX:+PrintGCDateStamps -XX:+PrintGCDetails"
CUSTOM_JAVA_OPTS=""
TOTAL_CONTAINER_MEM_WORKER=1024
NUMBER_OF_WORKERS=2
DEFAULT_OC_CLIENT_INSTALL_PATH=$(pwd)

JVM_NATIVE_MB=80

help_and_exit() {
  echo "Usage: "
  echo '  $ openshift [OPTIONS] COMMAND'
  echo ""
  echo "COMMAND:"
  wrappedecho "  login" "Login to OpenShift."
  wrappedecho '  newproject' 'Create new project within OpenShift. This is be default named "myprojectradargun".'
  wrappedecho "  build" "Build and push Docker image to OpenShift Docker registry."
  wrappedecho "  deploy" "Deploy RadarGun to OpenShift."
  wrappedecho "  results" "Download RadarGun logs and benchmark results from OpenShift to localhost."
  wrappedecho "  purge" "Purge OpenShift project. All RadarGun related objects will be removed from the OpenShift project."
  wrappedecho ""
  echo "OPTIONS:"
  wrappedecho '  -L LOGIN_COMMAND' 'Login command specific to your OpenShift provider. Defaults to empty string. Must start with oc. Applicable to login command.'
  wrappedecho "  -cd CONFIG_DIR" "Directory with confiration files for RadarGun and its plugins. Defaults to configs/. Applicable to deploy command."
  wrappedecho "  -cf CONFIG_FILE" "RadarGun benchmark file. Must be placed in CONFIG_DIR. Defaults to library-dist-reads.xml. Applicable to deploy command."
  wrappedecho "  -s NUMBER_OF_WORKERS" "Number of RadarGun workers. Defaults to 2. Applicable to deploy command."
  wrappedecho "  -j CUSTOM_JAVA_OPTS" "Custom JAVA_OPTS that will be passed to the worker and main process JVM. Applicable to deploy command."
  wrappedecho "  -m TOTAL_CONTAINER_MEM_WORKER" "Total container memory for Worker containers. Defaults to 1024MiB. Applicable to deploy command."
  exit 0
}

function wrappedecho {
  printf '%-25s' "${1}"; echo "${2}"
}

function assert_linux {
  if [ ! `uname` == Linux ]; then
    echo "Only Linux supported!"
    exit 1;
  fi
}
    
function build_radargun_image {
    cp -R ${RADARGUN_HOME}/target/distribution/RadarGun-3.0.0-SNAPSHOT ./
    # avoid running docker as sudo
    # https://docs.docker.com/install/linux/linux-postinstall/
    #------
    # enable experimental -> vi /etc/docker/daemon.json
    # {
    # "experimental": true
    # }
    docker build --squash --compress -t ${RADARGUN_IMAGE} .
    docker login -u $(oc whoami) -p $(oc whoami -t) ${DOCKER_REGISTRY}
    docker tag ${RADARGUN_IMAGE} ${FULL_IMAGE}
    docker push ${FULL_IMAGE}
}

function new_project {
    oc delete project ${TEST_PROJECT} || true
    ( \
        while oc get projects | grep -e ${TEST_PROJECT} > /dev/null; do \
            echo "Waiting for deleted projects..."; \
            sleep 5; \
        done; \
    )
    oc new-project ${TEST_PROJECT} || true
}

function compute_heap_size {
    MEM=$(expr ${TOTAL_CONTAINER_MEM_WORKER} - ${JVM_NATIVE_MB})
    XMS="-Xms${MEM}M"
    XMX="-Xmx${MEM}M"
    echo "======= Max heap size: ${XMX} ======="
}

function deploy_template {
    if [ "$CUSTOM_JAVA_OPTS" == "" ]; then
        compute_heap_size
        CUSTOM_JAVA_OPTS="${XMS} ${XMX} $DEFAULT_JAVA_OPTS"
    fi
    oc create -f radargun-template.json
    oc process radargun \
           -p TOTAL_CONTAINER_MEM=${TOTAL_CONTAINER_MEM_WORKER} \
           -p NUMBER_OF_WORKERS=${NUMBER_OF_WORKERS} \
           -p RADARGUN_MAIN=${RADARGUN_MAIN} \
           -p RADARGUN_CONFIG=${RADARGUN_CONFIG} \
           -p OPENSHIFT_MAIN_URL=${OPENSHIFT_MAIN_URL} \
           -p OPENSHIFT_TOKEN=${OPENSHIFT_TOKEN} \
           -p TEMPLATE_FILE_NAME=${TEMPLATE_FILE_NAME} \
           -p NAMESPACE=${TEST_PROJECT} \
           -p IMAGE=${FULL_IMAGE} \
           -p CUSTOM_JAVA_OPTS="${CUSTOM_JAVA_OPTS}" | oc create -f -
}

function create_config_map {
    oc create configmap radargun-configs \
    --from-file="${CONFIG_DIR}"
    oc label configmap radargun-configs template=radargun
}

function purge_project {
    oc delete all,secrets,sa,templates,configmaps,daemonsets,clusterroles,rolebindings,serviceaccounts,statefulsets --selector=template=radargun || true
    oc delete persistentvolumeclaims --selector=application=radargun-main
    oc delete persistentvolumeclaims --selector=application=radargun-worker
    oc delete template radargun || true
}

function get_results {
    rm -rf radargun-data
    NODES=`oc get pods --selector=template=radargun -o jsonpath='{.items[*].metadata.name}{"\n"}'`
    for node in $NODES; do
        oc rsync ${node}:/opt/radargun-data .
    done
}

## read in any command-line params
while ! [ -z $1 ]
do
  case "$1" in
    "-m")
        TOTAL_CONTAINER_MEM_WORKER=$2
        shift
    ;;
    "-s")
        NUMBER_OF_WORKERS=$2
        shift
    ;;
    "-cd")
        CONFIG_DIR=$2
        shift
    ;;
    "-cf")
        RADARGUN_CONFIG=$2
        shift
    ;;
    "-j")
        CUSTOM_JAVA_OPTS=$2
        shift
    ;;
    "-L")
        LOGIN_COMMAND=$2
        shift
    ;;
   "login")
        eval '${LOGIN_COMMAND}'
        shift
    ;;
    "newproject")
        new_project
    ;;
    "purge")
        purge_project
    ;;
    "build")
        build_radargun_image
    ;;
    "deploy")
        create_config_map
        deploy_template
    ;;
    "results")
        get_results
    ;;
    *)
      echo "Warning: unknown argument ${1}" 
      help_and_exit
      ;;
  esac
  shift
done
